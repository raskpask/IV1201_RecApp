{
	"info": {
		"_postman_id": "f8bbe0b6-946a-4366-a4e5-6ab04a8d9aa3",
		"name": "IV1201_API_test",
		"description": "Testing the API created for the application built in the course IV1201 at KTH",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "817dcda5-af9a-4a2d-8d1c-7a6867279196",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"raskpask\",\n\t\"password\": \"abc123\"\n}"
				},
				"url": {
					"raw": "localhost:8080/api/authentication",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication"
					]
				},
				"description": "Tests a login"
			},
			"response": []
		},
		{
			"name": "GetUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "96084cdf-18e6-4df9-a691-da8d267b08ad",
						"exec": [
							"pm.test(\"Body contains user string\", function () {",
							"    pm.expect(pm.response.text()).to.include('{\"user\":{\"username\":\"raskpask\"');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "localhost:8080/api/user",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "LoginNoCredentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8340d044-f096-46f0-8cad-52b095aa14df",
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"\",\n\t\"password\": \"\"\n}"
				},
				"url": {
					"raw": "localhost:8080/api/authentication",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication"
					]
				},
				"description": "A login request with no credentials in the body"
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79843eb8-b6a0-437f-9650-2667e204d5f6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "127.0.0.1:8080/api/authentication",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication"
					]
				},
				"description": "Test logging out the user logged in in the successful test 1"
			},
			"response": []
		},
		{
			"name": "LogoutNoCookie",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "79843eb8-b6a0-437f-9650-2667e204d5f6",
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.response.to.have.status(500);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "localhost:8080/api/authentication",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"authentication"
					]
				},
				"description": "Test logging out the user logged in in the successful test 1"
			},
			"response": []
		},
		{
			"name": "GetUserNoCookie",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "96084cdf-18e6-4df9-a691-da8d267b08ad",
						"exec": [
							"pm.test(\"Body contains user string\", function () {",
							"    pm.expect(pm.response.text()).to.include('Bad Request');",
							"});",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "localhost:8080/api/user",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "CheckIfExistingUsernameIsAvailable",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21c84215-b638-4e1b-9e42-0e0a8de8879d",
						"exec": [
							"",
							"pm.test(\"Body matches string 'Username taken'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Username taken\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"raskpask\"\n}"
				},
				"url": {
					"raw": "localhost:8080/api/username",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"username"
					]
				},
				"description": "Checks if a username already in the database exists"
			},
			"response": []
		},
		{
			"name": "CheckCompetences",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21c84215-b638-4e1b-9e42-0e0a8de8879d",
						"exec": [
							"",
							"pm.test(\"Body contains competences'\", function () {",
							"    pm.expect(pm.response.text()).to.include('[\"1\",\"Korvgrillning\",\"2\",\"Karuselldrift\",');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://iv1201-rec-app.herokuapp.com/api/competence",
					"protocol": "https",
					"host": [
						"iv1201-rec-app",
						"herokuapp",
						"com"
					],
					"path": [
						"api",
						"competence"
					]
				},
				"description": "Checks if a username already in the database exists"
			},
			"response": []
		},
		{
			"name": "CheckSQLInjection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "21c84215-b638-4e1b-9e42-0e0a8de8879d",
						"exec": [
							"",
							"pm.test(\"Body matches string 'Username not taken'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Username not taken\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"1 OR 1=1\"\n}"
				},
				"url": {
					"raw": "localhost:8080/api/username",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"username"
					]
				},
				"description": "Checks if a username already in the database exists"
			},
			"response": []
		},
		{
			"name": "CheckIfNonExistantUsernameExists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02967c3e-c218-48c7-b7fe-68e6d56fcfae",
						"exec": [
							"pm.test(\"Body matches string 'Username not taken'\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Username not taken\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"jhgfdghjkljhgfdrtgyuhjkiuhtygfrdtgyuhjihygtfrdftgyuh\"\n}"
				},
				"url": {
					"raw": "https://iv1201-rec-app.herokuapp.com/api/username",
					"protocol": "https",
					"host": [
						"iv1201-rec-app",
						"herokuapp",
						"com"
					],
					"path": [
						"api",
						"username"
					]
				},
				"description": "Checks if a username that does not exist in the database exists."
			},
			"response": []
		}
	]
}